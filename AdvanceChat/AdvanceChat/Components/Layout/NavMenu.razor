
@using AdvanceChat.Client.Services
@using AdvanceChat.Repositories
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject IChatRepository _chatRepository
@inject NavigationManager _navigationManager;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AdvanceChat</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/chatpage" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <form action="/logout" method="post">
                <AntiforgeryToken/>
                <button class="nav-link" @onclick="LogoutClicked">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </div>

        @* <div class="nav-item px-3"> *@
        @*     <NavLink class="nav-link" href="weather"> *@
        @*         <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather *@
        @*     </NavLink> *@
        @* </div> *@
    </nav>
</div>

@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private HubConnection _hubConnection;
    [Inject]
    public IMyHubConnectionService _myHubConnectionService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/chathub")).Build();

        if (_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }
    }
    public async Task LogoutClicked()
    {
        string id = ((await AuthenticationState).User).Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier).Value;
        await _chatRepository.RemoveUserAsync(id);
        await _hubConnection.SendAsync("RemoveUserAsync",id);
    }
}